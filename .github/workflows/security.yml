name: Security Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: "0 2 * * 1"   # scan hebdo (lundi 02:00 UTC)
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  codeql:
    name: SAST CodeQL
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]   # change selon ton projet: javascript, python, java, etc.
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Init CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      # Pour Java/C#/C++ etc., décommente l’autobuild :
      # - name: Autobuild
      #   uses: github/codeql-action/autobuild@v3

      - name: Analyze
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  trivy_deps:
    name: SCA Trivy (dépendances)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Trivy FS scan (SARIF)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'fs'
          format: 'sarif'
          output: 'trivy-deps.sarif'
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          vuln-type: 'library'
          skip-dirs: '.git,node_modules,venv'

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-deps.sarif'

      - name: Rapport table (lisible)
        if: always()
        run: trivy fs --format table --severity HIGH,CRITICAL --ignore-unfixed --output trivy-deps.txt .

      - name: Artefacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-deps
          path: |
            trivy-deps.sarif
            trivy-deps.txt

  image_and_zap:
    name: Scan image + DAST ZAP
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    needs: [trivy_deps, codeql]
    env:
      IMAGE_TAG: local/my-app:${{ github.sha }}
      APP_PORT: "8080"
      ZAP_MAX_MINUTES: "5"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image
        run: docker build -t "$IMAGE_TAG" .

      - name: Trivy image (SARIF)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: 'image'
          image-ref: '${{ env.IMAGE_TAG }}'
          format: 'sarif'
          output: 'trivy-image.sarif'
          ignore-unfixed: true
          severity: 'HIGH,CRITICAL'
          exit-code: '1'

      - name: Upload SARIF image
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-image.sarif'

      - name: Rapport image table
        if: always()
        run: trivy image --format table --severity HIGH,CRITICAL --ignore-unfixed "$IMAGE_TAG" > trivy-image.txt

      - name: Artefacts image
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-image
          path: |
            trivy-image.sarif
            trivy-image.txt

      - name: Run app
        run: |
          docker run -d --rm --name app -p 127.0.0.1:${APP_PORT}:${APP_PORT} "$IMAGE_TAG"
          for i in {1..30}; do
            if curl -fsS "http://127.0.0.1:${APP_PORT}/health" >/dev/null 2>&1 || curl -fsS "http://127.0.0.1:${APP_PORT}" >/dev/null 2>&1; then
              echo "App is up"; break
            fi
            sleep 2
          done

      - name: OWASP ZAP Baseline
        continue-on-error: true
        run: |
          docker run --rm --network host \
            -v "${{ github.workspace }}:/zap/wrk:rw" \
            owasp/zap2docker-stable \
            zap-baseline.py \
              -t "http://127.0.0.1:${APP_PORT}" \
              -a -m $ZAP_MAX_MINUTES \
              -c .zap/rules.tsv \
              -r zap-baseline.html \
              -w zap-warn.txt

      - name: Artefacts ZAP
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-baseline
          path: |
            zap-baseline.html
            zap-warn.txt

      - name: Stop app
        if: always()
        run: docker stop app
